import { createGlobalStyle, ThemeProvider } from 'styled-components';
import type { AppProps } from 'next/app';
import Head from 'next/head';
import { useState } from 'react';

interface ThemeType {
	body: string;
	text: string;
}

const GlobalStyle = createGlobalStyle<{ theme: ThemeType }>`
html,
body {
	background: ${({ theme }) => theme.body};
	color: ${({ theme }) => theme.text};
	padding: 0;
	margin: 0;
	font-family: -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen,
    	Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif;

}

a {
  color: inherit;
  text-decoration: none;
}

* {
  box-sizing: border-box;
}
`;

export const lightTheme = {
	body: '#f1f1f1',
	text: '#121620',
};
export const darkTheme = {
	body: '#121620',
	text: '#f1f1f1',
};

function MyApp({ Component, pageProps }: AppProps) {
	const [theme, setTheme] = useState('light');
	const toggleTheme = () => {
		theme === 'light' ? setTheme('dark') : setTheme('light');
	};

	return (
		<>
			<Head>
				<title>New App</title>
				<meta name='description' content='Generated by create next app' />
				<link rel='icon' href='/favicon.ico' />
			</Head>
			<button onClick={toggleTheme}>
				{theme ? (
					<span aria-label='Dark mode' role='img'>
						ðŸŒœ
					</span>
				) : (
					<span aria-label='Light mode' role='img'>
						ðŸŒž
					</span>
				)}
			</button>
			<ThemeProvider theme={theme == 'light' ? lightTheme : darkTheme}>
				<GlobalStyle />

				<Component {...pageProps} />
			</ThemeProvider>
		</>
	);
}

export default MyApp;
